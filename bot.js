const { Client, GatewayIntentBits, ActionRowBuilder, ButtonBuilder, EmbedBuilder, ButtonStyle } = require('discord.js');
const fs = require('fs');

// Load data from data.json with logging
let data;
try {
  data = JSON.parse(fs.readFileSync('./data.json', 'utf8'));
  console.log('Data loaded successfully from data.json');
} catch (error) {
  console.error('Could not load data.json:', error);
  data = { users: {}, stock: {} };
}

// Function to save data with logging
const saveData = () => {
  try {
    fs.writeFileSync('./data.json', JSON.stringify(data, null, 2));
    console.log('Data saved successfully to data.json');
  } catch (error) {
    console.error('Could not save data.json:', error);
  }
};

const client = new Client({ 
  intents: [
    GatewayIntentBits.Guilds, 
    GatewayIntentBits.GuildMessages,
    GatewayIntentBits.MessageContent
  ] 
});

client.once('ready', () => {
  console.log('üéâ Bot is ready and online!');
});

client.on('messageCreate', async (message) => {
  console.log(`Received message from ${message.author.tag}: ${message.content}`);

  // Top-up command handling
  if (message.content.startsWith('!topup')) {
    const amount = parseInt(message.content.split(' ')[1], 10);
    console.log(`Attempting to top up with amount: ${amount}`);

    // Check if amount is valid
    if (isNaN(amount) || amount <= 0) {
      console.log('Invalid top-up amount entered');
      return message.reply('‚ö†Ô∏è Please enter a valid amount to top up.');
    }

    const userId = message.author.id;

    // Check if user is registered
    if (!data.users[userId]) {
      console.log(`User ${message.author.tag} attempted top-up without registering`);
      return message.reply('‚ö†Ô∏è You need to register first using the register button.');
    }

    // Update balance
    data.users[userId].balance += amount;
    console.log(`User ${message.author.tag} new balance: ${data.users[userId].balance}`);

    // Save data
    saveData();
    console.log('Data saved successfully after top-up');

    // Notify user
    return interaction.reply({
      content: `‚úÖ Successfully topped up **${amount} baht**! Your new balance is **${data.users[userId].balance} baht**.`,
      ephemeral: true
    });
    
  }
 // ‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å
 if (message.content.startsWith('!addstock')) {
  if (!message.member.permissions.has('ADMINISTRATOR')) {
    return message.reply('‚ùå ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÉ‡∏ä‡πâ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ô‡∏µ‡πâ');
  }

  const args = message.content.split(' ').slice(1);
  const [price, id, password] = args;

  if (!price || isNaN(price) || !id || !password) {
    return message.reply('‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô: `!addstock <‡∏£‡∏≤‡∏Ñ‡∏≤> <‡πÑ‡∏≠‡∏î‡∏µ> <‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô>`');
  }

  const priceNumber = parseInt(price, 10);

  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏≤‡∏°‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  if (!data.stock[priceNumber]) {
    data.stock[priceNumber] = [];
  }

  data.stock[priceNumber].push({ id, password });
  saveData();
  console.log(`‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å: ‡∏£‡∏≤‡∏Ñ‡∏≤ ${priceNumber}, ‡πÑ‡∏≠‡∏î‡∏µ ${id}, ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô ${password}`);

  return message.reply(`‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô‡∏™‡∏ï‡πá‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤ **${priceNumber} ‡∏ö‡∏≤‡∏ó**.`);
}
if (message.content === '!store') {
  const storeEmbed = new EmbedBuilder()
    .setColor(0x34eb5b)
    .setTitle('üõí ‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏≤‡∏¢‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏Å‡∏°!')
    .setDescription(
      `‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏Å‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á:\n\n` +
      '```' + // ‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á "‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°" ‡∏£‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      'üîí ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏ä‡∏¥‡πâ‡∏ô‡∏ú‡πà‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢\n' +
      'üí≥ ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á\n' +
      'üïí ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ï‡∏•‡∏≠‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á\n' +
      'üìû ‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô üé´' +
      '```' // ‡∏õ‡∏¥‡∏î‡∏ö‡∏•‡πá‡∏≠‡∏Å‡πÇ‡∏Ñ‡πâ‡∏î
    )
    .addFields(
      {
        name: '‡πÄ‡πÄ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à 1üçÑ',
        value: '```‡∏£‡∏≤‡∏Ñ‡∏≤: 100 ‡∏ö‡∏≤‡∏ó\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏´‡πá‡∏î 70K!```',
        inline: true,
      },
      {
        name: '‡πÄ‡πÄ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à 2üçÑ',
        value: '```‡∏£‡∏≤‡∏Ñ‡∏≤: 200 ‡∏ö‡∏≤‡∏ó\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏´‡πá‡∏î 140K!```',
        inline: true,
      },
      {
        name: '‡πÄ‡πÄ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à 3üçÑ',
        value: '```‡∏£‡∏≤‡∏Ñ‡∏≤: 300 ‡∏ö‡∏≤‡∏ó\n‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏´‡πá‡∏î 210K!```',
        inline: true,
      }
    )
    .setThumbnail('https://example.com/store-icon.png') // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏£‡πâ‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ URL)
    .setFooter({
      text: 'üõí ‡∏£‡πâ‡∏≤‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏•‡∏≠‡∏î 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á | ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô‡∏´‡∏≤‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠ üé´',
      iconURL: 'https://example.com/support-icon.png' // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á‡∏ó‡∏µ‡∏°‡∏á‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ URL)
    });

    const row1 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('buy_game1')
          .setLabel('‡πÄ‡πÄ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à 1üçÑ')
          .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
          .setCustomId('buy_game2')
          .setLabel('‡πÄ‡πÄ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à 2üçÑ')
          .setStyle(ButtonStyle.Danger),
        new ButtonBuilder()
          .setCustomId('buy_game3')
          .setLabel('‡πÄ‡πÄ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à 3üçÑ')
          .setStyle(ButtonStyle.Danger)
      );

    const row2 = new ActionRowBuilder()
      .addComponents(
        new ButtonBuilder()
          .setCustomId('register')
          .setLabel('‚úçÔ∏è Register')
          .setStyle(ButtonStyle.Success),
        new ButtonBuilder()
          .setCustomId('topup')
          .setLabel('üí∞ Top Up')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('check_balance')
          .setLabel('üí≥ Check Balance')
          .setStyle(ButtonStyle.Secondary),
        new ButtonBuilder()
          .setCustomId('refresh_store')
          .setLabel('üîÑ ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä')
          .setStyle(ButtonStyle.Primary)
      );

    await message.channel.send({ embeds: [storeEmbed], components: [row1, row2] });
  }
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isButton()) return;
  
  const userId = interaction.user.id;
  console.log(`Button interaction received from ${interaction.user.tag}: ${interaction.customId}`);
  if (interaction.customId === 'refresh_store') {
    // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏´‡∏°‡πà (‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä)
    await interaction.channel.bulkDelete(100, true).catch(error => console.error('Failed to delete messages:', error));
  }
  // Register button handling
  if (interaction.customId === 'register') {
    if (!data.users[userId]) {
      data.users[userId] = { balance: 0 };
      saveData();
      const registerEmbed = new EmbedBuilder()
        .setColor(0x4caf50)
        .setDescription('‚úÖ **Registration Successful!**\n\nWelcome to the Game ID Store. Your starting balance is **0 Baht**.');
      return interaction.reply({ embeds: [registerEmbed], ephemeral: true });
    } else {
      const alreadyRegisteredEmbed = new EmbedBuilder()
        .setColor(0xffa500)
        .setDescription('‚ö†Ô∏è **You are already registered.**');
      return interaction.reply({ embeds: [alreadyRegisteredEmbed], ephemeral: true });
    }
  }

  // Top-up button handling
  if (interaction.customId === 'topup') {
    const topUpPromptEmbed = new EmbedBuilder()
      .setColor(0x00bcd4)
      .setDescription('üí∞ **Top-Up Instructions**\n\nPlease enter the amount you want to top up by typing `!topup [amount]` (e.g., `!topup 100`).');
    return interaction.reply({ embeds: [topUpPromptEmbed], ephemeral: true });
  }

  // Check balance button handling
  if (interaction.customId === 'check_balance') {
    if (!data.users[userId]) {
      const noRegisterEmbed = new EmbedBuilder()
        .setColor(0xff0000)
        .setDescription('üö´ **You need to register first!**');
      return interaction.reply({ embeds: [noRegisterEmbed], ephemeral: true });
    }
    const balanceEmbed = new EmbedBuilder()
      .setColor(0x2196f3)
      .setDescription(`üí≥ **Your Current Balance:**\n\nYou have **${data.users[userId].balance} Baht**.`);
    return interaction.reply({ embeds: [balanceEmbed], ephemeral: true });
  }

  // Handle game purchases
  const priceList = {
    buy_game1: 100,
    buy_game2: 200,
    buy_game3: 300,
  };

  const price = priceList[interaction.customId];
  if (price) {
    if (!data.users[userId]) {
      console.log(`User ${interaction.user.tag} attempted to buy a game without registering`);
      return interaction.reply({ content: '‚ö†Ô∏è You need to register first!', ephemeral: true });
    }

    if (data.users[userId].balance < price) {
      console.log(`User ${interaction.user.tag} does not have enough balance for this purchase`);
      return interaction.reply({ content: '‚ùå Insufficient balance! Please top up to proceed.', ephemeral: true });
    }

    const gameAccount = getRandomGameAccount(price);
    if (!gameAccount) {
      console.log(`Out of stock for game ID at price: ${price}`);
      return interaction.reply({ content: '‚ö†Ô∏è Sorry, this game ID is currently out of stock. Please try again later.', ephemeral: true });
    }

    data.users[userId].balance -= price;
    saveData();
    console.log(`User ${interaction.user.tag} purchased game ID. New balance: ${data.users[userId].balance}`);

    try {
      await interaction.user.send(`üéâ **‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!** üéâ\n\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏Å‡∏°‡πÉ‡∏ô‡∏£‡∏≤‡∏Ñ‡∏≤ **${price} ‡∏ö‡∏≤‡∏ó**\n\nüîë **‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏Å‡∏°**:\n\`\`\`\nID: ${gameAccount.id}\nPassword: ${gameAccount.password}\n\`\`\`\n\nüì© **‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏ß‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡∏±‡∏ö** ‡πÅ‡∏•‡∏∞‡∏≠‡∏¢‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏≠‡∏∑‡πà‡∏ô‡∏ó‡∏£‡∏≤‡∏ö ‡∏´‡∏≤‡∏Å‡∏û‡∏ö‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÉ‡∏î ‡πÜ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏ó‡∏µ‡∏°‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô!`);
      console.log(`DM ‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á ${interaction.user.tag} ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÑ‡∏≠‡∏î‡∏µ‡πÄ‡∏Å‡∏°`);
      

      const purchaseSuccessEmbed = new EmbedBuilder()
        .setColor(0x4caf50)
        .setDescription('‚úÖ **Purchase Completed!**\n\nCheck your DMs for the game ID details.');
      interaction.reply({ embeds: [purchaseSuccessEmbed], ephemeral: true });
    } catch (error) {
      console.error(`Failed to send DM to ${interaction.user.tag}:`, error);
      interaction.reply({
        content: '‚ùå Could not send DM. Please ensure your DMs are open and try again.',
        ephemeral: true
      });
    }
  }
});

const getRandomGameAccount = (price) => {
  const stock = data.stock[price];
  if (stock && stock.length > 0) {
    const randomIndex = Math.floor(Math.random() * stock.length);
    const selectedAccount = stock.splice(randomIndex, 1)[0];
    saveData(); // Save updated stock after removing an account
    return selectedAccount;
  }
  return null;
};

client.login('Discord');
